The Meson build system
Version: 1.7.2
Source dir: C:\Users\Rodrigo\AppData\Local\Temp\tmpc5z677mk
Build dir: C:\Users\Rodrigo\AppData\Local\Temp\tmpc5z677mk\bbdir
Build type: native build
Project name: expint
Project version: 0.1
Fortran compiler for the host machine: gfortran (gcc 14.2.0 "GNU Fortran (Rev2, Built by MSYS2 project) 14.2.0")
Fortran linker for the host machine: gfortran ld.bfd 2.43.1
C compiler for the host machine: cc (gcc 14.2.0 "cc (Rev2, Built by MSYS2 project) 14.2.0")
C linker for the host machine: cc ld.bfd 2.43.1
Host machine cpu family: x86_64
Host machine cpu: x86_64
Program C:\Users\Rodrigo\miniconda3\python.exe found: YES (C:\Users\Rodrigo\miniconda3\python.exe)
Run-time dependency python found: YES 3.12
Library quadmath found: YES
Build targets in project: 1

Found ninja-1.11.1.git.kitware.jobserver-1 at C:\Users\Rodrigo\miniconda3\Scripts\ninja.EXE
ninja: Entering directory `C:/Users/Rodrigo/AppData/Local/Temp/tmpc5z677mk/bbdir'
[1/6] Compiling C object expint.cp312-win_amd64.pyd.p/expintmodule.c.obj
[2/6] Scanning modules
[3/6] Compiling Fortran object expint.cp312-win_amd64.pyd.p/expint-f2pywrappers.f.obj
[4/6] Compiling Fortran object expint.cp312-win_amd64.pyd.p/expint.f90.obj
[5/6] Compiling C object expint.cp312-win_amd64.pyd.p/fdef2c95a4dd72a4b86c832312e3647fd2047c6d_.._.._f2py_src_fortranobject.c.obj
[6/6] Linking target expint.cp312-win_amd64.pyd
INFO: autodetecting backend as ninja
INFO: calculating backend command to run: C:\Users\Rodrigo\miniconda3\Scripts\ninja.EXE -C C:/Users/Rodrigo/AppData/Local/Temp/tmpc5z677mk/bbdir
Cannot use distutils backend with Python>=3.12, using meson backend instead.
Using meson backend
Will pass --lower to f2py
See https://numpy.org/doc/stable/f2py/buildtools/meson.html
Reading f2cmap from '.f2py_f2cmap' ...
	Mapping "real(kind=real64)" to "double"
	Mapping "integer(kind=int16)" to "int"
Successfully applied user defined f2cmap changes
Reading fortran codes...
	Reading file 'expint.f90' (format:free)
{'before': '', 'this': 'use', 'after': ', intrinsic :: iso_fortran_env, only: int16, real64 '}
Line #27 in expint.f90:"  use, intrinsic :: iso_fortran_env, only: int16, real64 "
	analyzeline: Could not crack the use statement.
Post-processing...
	Block: expint
			Block: expi
In: :expint:expint.f90:expi
param_eval: got "eval() arg 1 must be a string, bytes or code object" on 8
In: :expint:expint.f90:expi
param_eval: got "eval() arg 1 must be a string, bytes or code object" on 8
Applying post-processing hooks...
  character_backward_compatibility_hook
Post-processing (stage 2)...
Building modules...
    Building module "expint"...
    Generating possibly empty wrappers"
    Maybe empty "expint-f2pywrappers.f"
        Constructing wrapper function "expi"...
          ei = expi(x)
    Wrote C/API module "expint" to file ".\expintmodule.c"